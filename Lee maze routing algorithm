#include<stdio.h>
#include<math.h>
#include<stdlib.h>
int obst[50][2];
int grid[50][50];
int start[1][2];
int stop[1][2];
int path[50][2];

void retrace()
{
int i,j;
i=grid[stop[0][0]][stop[0][1]];
int flagr=stop[0][0];
int flagc=stop[0][1];
grid[flagr][flagc]=500;

for(j=i;j>1;j--)
{
if(grid[flagr-1][flagc]==j-1)
{
grid[flagr-1][flagc]=500;
flagr=flagr-1;
}
else if(grid[flagr][flagc-1]==j-1)
{
grid[flagr][flagc-1]=500;
flagc=flagc-1;
}
else if(grid[flagr+1][flagc]==j-1)
{
grid[flagr+1][flagc]=500;
flagr=flagr+1;
}
else if(grid[flagr][flagc+1]==j-1)
{
grid[flagr][flagc+1]=500;
flagc=flagc+1;
}
else
{
printf("no path found");
break;
}
}
}



void fill(int i,int N)
{
int j,k,l,r,c;

for(r=0;r<N;r++)
{
for(c=0;c<N;c++)
{
if(grid[r][c]==i)
{
if(r-1>=0&&grid[r-1][c]!=i-1&&grid[r-1][c]!=0)
	grid[r-1][c]=i+1;
if(r+1<N&&grid[r+1][c]!=i-1&&grid[r+1][c]!=0)
        grid[r+1][c]=i+1;
if(c+1<N&&grid[r][c+1]!=i-1&&grid[r][c+1]!=0)
        grid[r][c+1]=i+1;
if(c-1>=0&&grid[r][c-1]!=i-1&&grid[r][c-1]!=0)
        grid[r][c-1]=i+1;
}
}
}
}



void main()
{
int i,j,k,N,M;
printf("\nsize of the grid : ");
scanf("%d",&N);
printf("\nnumber of obstacle : ");
scanf("%d",&M);
printf("\nstarting node (r,c) : ");
scanf("%d %d",&start[0][0],&start[0][1]);
printf("\nstopping node (r,c) : ");
scanf("%d %d",&stop[0][0],&stop[0][1]);
printf("\nobstacles : ");


for(i=0;i<N;i++)
{
for(j=0;j<N;j++)
{
grid[i][j]=101;
}
}

grid[start[0][0]][start[0][1]]=1;
for(i=0;i<M;i++)
{
scanf("%d  %d",&obst[i][0],&obst[i][1]);
grid[obst[i][0]][obst[i][1]]=0;
}

for(i=1;i<15;i++)
{
printf(".......\n");
fill(i,N);
}

retrace();
for(i=0;i<N;i++)
{
printf("\n");
for(j=0;j<N;j++)
{
if(grid[i][j]==500)
printf("\tP    ");
else if(grid[i][j]==0)
printf("\t     ");
else
printf("\t%d   ",grid[i][j]);
}
}

printf("\n %d,%d   %d,%d", start[0][0],start[0][1],stop[0][0],stop[0][1]);
}

