#include<stdio.h>
#include<math.h>
#include<stdlib.h>
int obst[2500][2];
int grid[50][50];
int grid2[50][50];
int start[50][1][2];
int stop[50][1][2];
int path[50][100][2];

void retrace();
void fill(int i,int N);

void main()
{
int i,j,k,l,N,M,L;
printf("\nsize of the grid:");
scanf("%d",&N);
printf("\n number of obstacle");
scanf("%d",&M);
printf("\n number of start and stop");
scanf("%d",&L);
for(i=0;i<L;i++)
{
printf("\n %dth start and stop pair",i+1);
printf("\nstarting node (r,c):");
scanf("%d %d",&start[i][0][0],&start[i][0][1]);
printf("\n stopping node (r,c):");
scanf("%d %d",&stop[i][0][0],&stop[i][0][1]);
}
printf("obstacles:");
for(i=0;i<N;i++)
{
for(j=0;j<N;j++)
{
grid[i][j]=101;
}
}


grid[start[0][0][0]][start[0][0][1]]=1;
for(i=0;i<M;i++)
{
scanf("%d  %d",&obst[i][0],&obst[i][1]);
grid[obst[i][0]][obst[i][1]]=0;
}
for(l=0;l<L;l++)
{


for(i=0;i<N;i++)
{
for(j=0;j<N;j++)
{
if(grid2[i][j]>=500)
grid[i][j]=0;
if(grid[i][j]>0)
grid[i][j]=101;
}
}
grid[start[l][0][0]][start[l][0][1]]=1;

for(i=1;i<15;i++)
{
printf(".......\n");
fill(i,N);
}

retrace(l);

}
for(i=0;i<N;i++)
{
printf("\n");
for(j=0;j<N;j++)
{
int div=grid2[i][j]-500;
if(grid2[i][j]>=500)
printf("\t*%d    ",div);
else if(grid[i][j]==0)
printf("\t     ");
else
printf("\t.  ");
}
}

}

void retrace(k)
{
int i,j;
i=grid[stop[k][0][0]][stop[k][0][1]];
int flagr=stop[k][0][0];
int flagc=stop[k][0][1];
grid2[flagr][flagc]=500+k;

for(j=i;j>1;j--)
{
if(grid[flagr-1][flagc]==j-1)
{
grid2[flagr-1][flagc]=500+k;
flagr=flagr-1;
}
else if(grid[flagr][flagc-1]==j-1)
{
grid2[flagr][flagc-1]=500+k;
flagc=flagc-1;
}
else if(grid[flagr+1][flagc]==j-1)
{
grid2[flagr+1][flagc]=500+k;
flagr=flagr+1;
}
else if(grid[flagr][flagc+1]==j-1)
{
grid2[flagr][flagc+1]=500+k;
flagc=flagc+1;
}
else
{
printf("no path found");
break;
}
}
}

void fill(int i,int N)
{
int j,k,l,r,c;

for(r=0;r<N;r++)
{
for(c=0;c<N;c++)
{
if(grid[r][c]==i)
{
if(r-1>=0&&grid[r-1][c]!=i-1&&grid[r-1][c]!=0)
	grid[r-1][c]=i+1;
if(r+1<N&&grid[r+1][c]!=i-1&&grid[r+1][c]!=0)
        grid[r+1][c]=i+1;
if(c+1<N&&grid[r][c+1]!=i-1&&grid[r][c+1]!=0)
        grid[r][c+1]=i+1;
if(c-1>=0&&grid[r][c-1]!=i-1&&grid[r][c-1]!=0)
        grid[r][c-1]=i+1;
}
}
}
}
